/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: jkazulyblanco (https://sketchfab.com/jkazulyblanco)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/3d-models/koenigsegg-one1-low-poly-8d253a7f43404113838d72c7fc9cfa94
title: Koenigsegg One1 low poly
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useThree, useFrame } from '@react-three/fiber';
import { useKeyboardControls } from '../Hooks/useKeyboardControls';
import { useSphere } from '@react-three/cannon';
import { Vector3 } from 'three';

type GLTFResult = GLTF & {
  nodes: {
    Object_2: THREE.Mesh;
    Object_3: THREE.Mesh;
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
  };
  materials: {
    lambert10SG: THREE.MeshStandardMaterial;
    lambert11SG: THREE.MeshStandardMaterial;
    lambert12SG: THREE.MeshStandardMaterial;
    lambert13SG: THREE.MeshStandardMaterial;
    lambert16SG: THREE.MeshStandardMaterial;
    lambert9SG: THREE.MeshStandardMaterial;
  };
};

const SPEED = 6;

export default function One1({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>();
  const { camera } = useThree();
  const { moveForward, moveBackward, moveLeft, moveRight } =
    useKeyboardControls();

  const { nodes, materials } = useGLTF('/One1.glb') as GLTFResult;
  const [ref, api] = useSphere(() => ({
    mass: 500,
    type: 'Dynamic',
  }));
  const velocity = React.useRef([0, 0, 0]);
  React.useEffect(() => {
    api.velocity.subscribe((v) => (velocity.current = v));
  }, [api.velocity]);

  useFrame(() => {
    const direction = new Vector3();

    const frontVector = new Vector3(
      0,
      0,
      Number(moveBackward) - Number(moveForward)
    );
    const sideVector = new Vector3(Number(moveLeft) - Number(moveRight), 0, 0);
    direction
      .subVectors(frontVector, sideVector)
      .normalize()
      .multiplyScalar(SPEED)
      .applyEuler(camera.rotation);

    api.velocity.set(direction.x, velocity.current[1], direction.z);
  });

  return (
    <group ref={group} {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.14}>
        <mesh ref={ref}>
          <mesh
            geometry={nodes.Object_2.geometry}
            material={materials.lambert10SG}
          />
          <mesh
            geometry={nodes.Object_3.geometry}
            material={materials.lambert10SG}
          />
          <mesh
            geometry={nodes.Object_4.geometry}
            material={materials.lambert11SG}
          />
          <mesh
            geometry={nodes.Object_5.geometry}
            material={materials.lambert12SG}
          />
          <mesh
            geometry={nodes.Object_6.geometry}
            material={materials.lambert13SG}
          />
          <mesh
            geometry={nodes.Object_7.geometry}
            material={materials.lambert16SG}
          />
          <mesh
            geometry={nodes.Object_8.geometry}
            material={materials.lambert9SG}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload('/One1.glb');
